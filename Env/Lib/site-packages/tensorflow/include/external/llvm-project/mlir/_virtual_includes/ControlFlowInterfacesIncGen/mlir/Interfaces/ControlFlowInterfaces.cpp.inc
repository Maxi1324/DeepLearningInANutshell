/*===- TableGen'erated file -------------------------------------*- C++ -*-===*\
|*                                                                            *|
|* Interface Definitions                                                      *|
|*                                                                            *|
|* Automatically generated file, do not edit!                                 *|
|*                                                                            *|
\*===----------------------------------------------------------------------===*/

::mlir::Optional<::mlir::MutableOperandRange> mlir::BranchOpInterface::getMutableSuccessorOperands(unsigned index) {
      return getImpl()->getMutableSuccessorOperands(getImpl(), getOperation(), index);
  }
::mlir::Optional<::mlir::OperandRange> mlir::BranchOpInterface::getSuccessorOperands(unsigned index) {
      return getImpl()->getSuccessorOperands(getImpl(), getOperation(), index);
  }
::mlir::Optional<::mlir::BlockArgument> mlir::BranchOpInterface::getSuccessorBlockArgument(unsigned operandIndex) {
      return getImpl()->getSuccessorBlockArgument(getImpl(), getOperation(), operandIndex);
  }
::mlir::Block *mlir::BranchOpInterface::getSuccessorForOperands(::mlir::ArrayRef<::mlir::Attribute> operands) {
      return getImpl()->getSuccessorForOperands(getImpl(), getOperation(), operands);
  }
::mlir::OperandRange mlir::RegionBranchOpInterface::getSuccessorEntryOperands(unsigned index) {
      return getImpl()->getSuccessorEntryOperands(getImpl(), getOperation(), index);
  }
void mlir::RegionBranchOpInterface::getSuccessorRegions(::mlir::Optional<unsigned> index, ::mlir::ArrayRef<::mlir::Attribute> operands, ::mlir::SmallVectorImpl<::mlir::RegionSuccessor> & regions) {
      return getImpl()->getSuccessorRegions(getImpl(), getOperation(), index, operands, regions);
  }
void mlir::RegionBranchOpInterface::getNumRegionInvocations(::mlir::ArrayRef<::mlir::Attribute> operands, ::mlir::SmallVectorImpl<int64_t> & countPerRegion) {
      return getImpl()->getNumRegionInvocations(getImpl(), getOperation(), operands, countPerRegion);
  }
::mlir::MutableOperandRange mlir::RegionBranchTerminatorOpInterface::getMutableSuccessorOperands(::mlir::Optional<unsigned> index) {
      return getImpl()->getMutableSuccessorOperands(getImpl(), getOperation(), index);
  }
::mlir::OperandRange mlir::RegionBranchTerminatorOpInterface::getSuccessorOperands(::mlir::Optional<unsigned> index) {
      return getImpl()->getSuccessorOperands(getImpl(), getOperation(), index);
  }
